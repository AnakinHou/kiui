{"name":"Kiui","tagline":"Auto-layout Ui library, lightweight, skinnable and system agnostic, with an OpenGL backend","body":"kiUi [![Build Status](https://travis-ci.org/novembermonk/kiui.svg?branch=master)](https://travis-ci.org/novembermonk/kiui)\r\n====\r\n\r\nkiUi is a lightweight auto-layout Ui library, abstracted out from any rendering or input code.\r\n\r\nkiui supports Emscripten : try the live demo [here](http://novembermonk.github.io/kiui/livedemo/kiui.html).\r\n\r\nIt is designed according to the following design goals :\r\n- Separation of Ui appearance and logic\r\n- Automatic layout as the norm, not the exception (as in HTML)\r\n- Easy styling, separated from logic (as in CSS)\r\n- Brevity and simplicity above everything else, especially in C++ code\r\n- Good for both an editor Ui and a game Ui\r\n\r\n![screenshot of the example window with a raw skin](kiui.png?raw=true)\r\n\r\nAuto-Layout\r\n===========\r\n\r\nEvery single element in kiUi auto-layouts ! You have nothing to do. No position to set, no size to determine.\r\n- Code the logic : Just add your widgets and define the logic as you please.\r\n- Code the appearance : Just set your fonts, font-size, images, and kiUi will do the rest.\r\n\r\nThe style can be defined and tweaked separately by an artist. Style are defined in C++ as of now, but Style Sheets are planned to come soon.\r\n\r\nUsage\r\n====\r\n```C++\r\nRootSheet& root = uiwindow.rootSheet();\r\nWindow& window = root.emplace<Window>(\"Example window\");\r\n\r\nExpandbox& expandbox = window.emplace<Expandbox>(\"Collapsable box\");\r\n\r\nLabel& label = expandbox.emplace<Label>(\"kiUi says hello.\");\r\nButton& button = expand.emplace<Button>(\"Push me\");\r\n```\r\n\r\nFor a more in-depth usage example look at the full demo implementation : [Example](src/Ui/mkUiExample.cpp)\r\n\r\nNano\r\n====\r\n\r\nkiUi comes with a light renderer / input system based on NanoVG and GLFW to quickly bootstrap a prototype application in a few lines of code.\r\n\r\n```C++\r\nGlWindow glwindow(1200, 800, \"mk UiEditApp\");\r\nglwindow.initContext();\r\n\r\nUiWindow& uiwindow = glwindow.uiWindow();\r\nbool pursue = true;\r\nwhile(pursue)\r\n    pursue = glwindow.renderFrame();\r\n```\r\n\r\nWidgets\r\n=======\r\n\r\n- Dockspace\r\n- Tabber\r\n- Table\r\n- Window (resize, drag, dock)\r\n- Radiobutton\r\n- Dropdown\r\n\r\nSkins\r\n=====\r\n\r\nkiUi was conceived so that each element can be styled in a way very similar to CSS, through Style Sheets\r\nYou can switch between Styles Sheets on the fly\r\n\r\n![switching between styles at runtime](media/themes.gif?raw=true)\r\n\r\nEditor\r\n======\r\n\r\nkiUi will come with a simple editor which also uses kiUi for its interface\r\n\r\n\r\n## License\r\nThe library is licensed under [zlib license](LICENSE.txt)\r\n\r\n## Links\r\nUses [nanovg](https://github.com/memononen/nanovg) for vector rendering\r\nUses [glfw](https://github.com/glfw/glfw) for OpenGL context management\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}